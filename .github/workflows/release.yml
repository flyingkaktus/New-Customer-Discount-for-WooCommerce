name: Version Management and Release

permissions:
  contents: write
  packages: write
  issues: write

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'v*'
      - '*.zip'
      - '*.md'

jobs:
  update-patch-version:
    name: Update Patch Version
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: update version') && !contains(github.event.head_commit.message, 'MINOR:') && !contains(github.event.head_commit.message, 'MAJOR:')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -Po "Version: \K[0-9]+\.[0-9]+\.[0-9]+" ncd_wp.php)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Aktuelle Version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT=${{ steps.current_version.outputs.CURRENT_VERSION }}
          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          PATCH=$(echo $CURRENT | cut -d. -f3)
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Neue Version: $NEW_VERSION"

      - name: Update version in files
        run: |
          VERSION=${{ steps.new_version.outputs.NEW_VERSION }}
          DATE=$(date +%Y-%m-%d)
          echo "Aktualisiere Version auf: $VERSION"
          
          # Update Plugin-Datei
          sed -i "s/Version: .*$/Version: $VERSION/" ncd_wp.php
          sed -i "s/define('NCD_VERSION'.*/define('NCD_VERSION', '$VERSION');/" ncd_wp.php
          
          # Update README.txt
          sed -i "s/Stable tag: .*$/Stable tag: $VERSION/" README.txt
          
          # Erstelle neuen Changelog Eintrag
          CHANGELOG_ENTRY="= $VERSION - $DATE =\n* ${{ github.event.head_commit.message }}"
          
          # Füge den neuen Eintrag nach == Changelog == ein
          awk -v entry="$CHANGELOG_ENTRY" '
          /== Changelog ==/ {
            print $0
            print ""
            print entry
            next
          }
          {print}' README.txt > readme.tmp && mv readme.tmp README.txt

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ncd_wp.php README.txt
          git commit -m "chore: update version to ${{ steps.new_version.outputs.NEW_VERSION }}"
          git push

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: update version') && (contains(github.event.head_commit.message, 'MINOR:') || contains(github.event.head_commit.message, 'MAJOR:'))"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, xml
          tools: composer:v2

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -Po "Version: \K[0-9]+\.[0-9]+\.[0-9]+" ncd_wp.php)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Aktuelle Version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT=${{ steps.current_version.outputs.CURRENT_VERSION }}
          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          PATCH=$(echo $CURRENT | cut -d. -f3)
          
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *"MAJOR:"* ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ $COMMIT_MSG == *"MINOR:"* ]]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "Neue Version: $NEW_VERSION"

      - name: Update version and changelog
        run: |
          VERSION=${{ steps.new_version.outputs.NEW_VERSION }}
          DATE=$(date +%Y-%m-%d)
          echo "Aktualisiere Version auf: $VERSION"
          
          # Update Plugin-Datei
          sed -i "s/Version: .*$/Version: $VERSION/" ncd_wp.php
          sed -i "s/define('NCD_VERSION'.*/define('NCD_VERSION', '$VERSION');/" ncd_wp.php
          
          # Update README.txt Version
          sed -i "s/Stable tag: .*$/Stable tag: $VERSION/" README.txt
          
          # Erstelle neuen Changelog Eintrag für MINOR/MAJOR
          COMMIT_MSG=$(git log -1 --pretty=%B)
          CHANGELOG_ENTRY="= $VERSION - $DATE =\n"
          
          if [[ $COMMIT_MSG == *"MAJOR:"* ]]; then
            CHANGELOG_ENTRY+="Major Release:\n"
          elif [[ $COMMIT_MSG == *"MINOR:"* ]]; then
            CHANGELOG_ENTRY+="Feature Release:\n"
          fi
          
          CHANGELOG_ENTRY+=$(git log -1 --pretty=format:"%b")
          
          # Füge den neuen Eintrag nach == Changelog == ein
          awk -v entry="$CHANGELOG_ENTRY" '
          /== Changelog ==/ {
            print $0
            print ""
            print entry
            next
          }
          {print}' README.txt > readme.tmp && mv readme.tmp README.txt

      - name: PHP Lint
        run: |
          find . -name "*.php" -exec php -l {} \;

      - name: Generate changelog for release
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          if [ -n "$PREVIOUS_TAG" ]; then
            if [[ $COMMIT_MSG == *"MAJOR:"* ]]; then
              echo "### Breaking Changes (MAJOR):" > changelog.md
              git log -1 --pretty=format:"%b" >> changelog.md
              echo -e "\n\n### Feature Updates (MINOR):" >> changelog.md
              git log ${PREVIOUS_TAG}..HEAD --grep="MINOR:" --pretty=format:"* %b" >> changelog.md
              echo -e "\n\n### Patches and Fixes:" >> changelog.md
              git log ${PREVIOUS_TAG}..HEAD --grep="^[^(MAJOR|MINOR)]" --pretty=format:"* %s (%h)" --no-merges >> changelog.md
            elif [[ $COMMIT_MSG == *"MINOR:"* ]]; then
              echo "### Feature Updates (MINOR):" > changelog.md
              git log -1 --pretty=format:"%b" >> changelog.md
              echo -e "\n\n### Patches and Fixes:" >> changelog.md
              git log ${PREVIOUS_TAG}..HEAD --grep="^[^(MAJOR|MINOR)]" --pretty=format:"* %s (%h)" --no-merges >> changelog.md
            fi
          else
            echo "### Initial Release" > changelog.md
            git log --pretty=format:"* %s (%h)" --no-merges >> changelog.md
          fi
          
          CHANGELOG=$(cat changelog.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          rm changelog.md

      - name: Create ZIP archive
        run: |
          mkdir -p temp/newcustomer-discount
          
          rsync -av \
            --exclude='.git*' \
            --exclude='.github' \
            --exclude='temp' \
            --exclude='tests' \
            --exclude='node_modules' \
            --exclude='*.zip' \
            --exclude='README.md' \
            --exclude='.DS_Store' \
            --exclude='*.log' \
            --exclude='*.sql' \
            --exclude='*.tar.gz' \
            --exclude='*.bak' \
            --exclude='*.swp' \
            . temp/newcustomer-discount/
          
          cd temp
          zip -r ../release.zip newcustomer-discount
          cd ..
          
          rm -rf temp

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add ncd_wp.php README.txt
          
          git commit -m "chore: update version to ${{ steps.new_version.outputs.NEW_VERSION }}"
          git tag "v${{ steps.new_version.outputs.NEW_VERSION }}"
          git push
          git push --tags

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: release.zip
          tag_name: v${{ steps.new_version.outputs.NEW_VERSION }}
          name: Release ${{ steps.new_version.outputs.NEW_VERSION }}
          body: |
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### Automatisch generierter Release
            
            Diese Version enthält:
            * Plugin Version: ${{ steps.new_version.outputs.NEW_VERSION }}
            * Generiert am: ${{ steps.new_version.outputs.DATE }}
            
            ### Installation
            1. Laden Sie die ZIP-Datei herunter
            2. Gehen Sie in Ihrem WordPress-Dashboard zu Plugins > Installieren
            3. Klicken Sie auf "Plugin hochladen"
            4. Wählen Sie die heruntergeladene ZIP-Datei aus
            5. Klicken Sie auf "Jetzt installieren"
            6. Aktivieren Sie das Plugin
          draft: false
          prerelease: false

      - name: Cleanup
        if: always()
        run: |
          rm -f release.zip